// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.2.4 (swiftlang-1103.0.32.9 clang-1103.0.32.53)
// swift-module-flags: -target x86_64-apple-ios10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name SDKConfigurations
import Foundation
@_exported import SDKConfigurations
import Swift
@objc(ZDKConfiguration) public protocol Configuration : ObjectiveC.NSObjectProtocol {
  @objc init()
}
@objc public enum ConfigurationError : Swift.Int, Foundation.LocalizedError {
  case noConfig
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
  public static var _nsErrorDomain: Swift.String {
    get
  }
}
@objc(ZDKConfigurations) final public class Configurations : ObjectiveC.NSObject {
  public typealias ConfigArrayType = [SDKConfigurations.Configuration]
  @objc final public var configs: SDKConfigurations.Configurations.ConfigArrayType {
    get
  }
  @objc public init(configs: [SDKConfigurations.Configuration])
  @objc deinit
  @objc override dynamic public init()
}
extension Configurations : Swift.Collection {
  public typealias Index = SDKConfigurations.Configurations.ConfigArrayType.Index
  public typealias Element = SDKConfigurations.Configurations.ConfigArrayType.Element
  public typealias ArrayLiteralElement = SDKConfigurations.Configurations.Element
  @objc final public var startIndex: SDKConfigurations.Configurations.Index {
    @objc get
  }
  @objc final public var endIndex: SDKConfigurations.Configurations.Index {
    @objc get
  }
  @objc final public func insert(_ configuration: SDKConfigurations.Configuration)
  @objc final public subscript(index: SDKConfigurations.Configurations.Index) -> Swift.IndexingIterator<SDKConfigurations.Configurations>.Element {
    @objc get
  }
  final public subscript<T>(forType type: T.Type) -> T? where T : SDKConfigurations.Configuration {
    get
  }
  final public func index(after i: SDKConfigurations.Configurations.Index) -> SDKConfigurations.Configurations.Index
  final public func addDefaultConfigIfNeeded<T>(ofType type: T.Type) where T : SDKConfigurations.Configuration
  @available(swift, obsoleted: 1.0)
  @objc final public func addDefaultConfigIfNeeded(_ config: SDKConfigurations.Configuration)
  public typealias Iterator = Swift.IndexingIterator<SDKConfigurations.Configurations>
  public typealias SubSequence = Swift.Slice<SDKConfigurations.Configurations>
  public typealias Indices = Swift.DefaultIndices<SDKConfigurations.Configurations>
}
extension Configurations : Swift.ExpressibleByArrayLiteral {
  convenience public init(arrayLiteral elements: SDKConfigurations.Configurations.Element...)
}
extension SDKConfigurations.ConfigurationError : Swift.Equatable {}
extension SDKConfigurations.ConfigurationError : Swift.Hashable {}
extension SDKConfigurations.ConfigurationError : Swift.RawRepresentable {}
